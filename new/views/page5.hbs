<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/style2.css">
    {{!-- generate pdf requirement --}}
    <link href="https://fonts.googleapis.com/css?family=Raleway:400,300,600,800,900" rel="stylesheet" type="text/css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css">
  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.min.js"></script> 
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.3/html2pdf.bundle.min.js"></script>
    {{!-- chart js requirement --}}
 <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"> </script>
    <title>hello world</title>
</head>


<body>
<div id="container"></div>



<script>

var total_goals = 10;
var goals_completed = 5;

var bar = new ProgressBar.Circle(container, {
  color: '#aaa',
  // This has to be the same size as the maximum width to
  // prevent clipping
  strokeWidth: 4,
  trailWidth: 1,
  easing: 'easeInOut',
  duration: 1400,
  text: {
    autoStyleContainer: false
  },
  from: { color: '#aaa', width: 1 },
  to: { color: '#333', width: 4 },
  // Set default step function for all animate calls
  step: function(state, circle) {
    circle.path.setAttribute('stroke', state.color);
    circle.path.setAttribute('stroke-width', state.width);

    var value = Math.round(circle.value() * 100);
    if (value === 0) {
      circle.setText('');
    } else {
      circle.setText(value);
    }

  }
});
bar.text.style.fontFamily = '"Raleway", Helvetica, sans-serif';
bar.text.style.fontSize = '2rem';

bar.animate(goals_completed/total_goals);  // Number from 0.0 to 1.0



</script>

 <div class="col-sm-6" id="divToExport">


THese Are your DAta
  {{!-- {{#each data}} --}}
       
         <br>
             
            
          

<canvas id="myChart" style="width:100%;max-width:700px"></canvas>
{{!-- charjs script --}}

<script>


var xValues = ["secured", "Not secured", "no answer"];
var yValues = [{{data.yess}} ,{{data.noo}} ,{{data.idk}} ];
var barColors = [
  "#E2DCDA",
  "#AAA9A8",
  "#5D5B58",

];
var col = [
 'blue  ',
 'blue',
 'blue'
];



new Chart("myChart", {
  type: "pie",
  
  data: {
    labels: xValues,
    datasets: [{
      backgroundColor: barColors,
      borderColor: col,
      
      data: yValues
    }]
  },
  options: {
    title: {
      display: true,
      text: "results "
    }
  }
});
</script>

  {{!-- {{/each}} --}}
  <br>
  <h1>your company is secured by : </h1>
<p id="demo" style="color: red; font-size:35px " >%</p>
  
   <br>
  <h1>your company is vulnerable by : </h1>
<p id="demo1" style="color: red; font-size:35px " >%</p>
  

{{!-- <p id="demo1">%</p>
<p id="demo2">%</p> --}}


  </div>
        <button type="button" onclick="generatePDF()" class="btn-sm btn-alert ">Export to PDF</button>

{{!-- pdf generate script --}}
  <script type="text/javascript">
  function generatePDF() {
        
        // Choose the element id which you want to export.
        var element = document.getElementById('divToExport');
        element.style.width = '700px';
        element.style.height = '900px';
        var opt = {
            margin:       0.5,
            filename:     'report.pdf',
            image:        { type: 'jpeg', quality: 1 },
            html2canvas:  { scale: 1 },
            jsPDF:        { unit: 'in', format: 'letter', orientation: 'portrait',precision: '12' }
          };
        
        // choose the element and pass it to html2pdf() function and call the save() on it to save as pdf.
        html2pdf().set(opt).from(element).save();
      }
</script>







<script> 
total = {{data.idk}} +{{data.noo}}+ {{data.yess}}

 yes = {{data.yess}}
 no = {{data.noo}}
 idk = {{data.idk}}
document.getElementById("demo").innerHTML = yes * 100 / total  + "%";
document.getElementById("demo1").innerHTML = no * 100 / total  + "%";
document.getElementById("demo2").innerHTML = idk * 100 / total  + "%";


</script>
{{!-- <p id="demo"></p> --}}
<p id="demo1"></p>
<p id="demo2"></p>

{{!-- <p id="yes">here</p>
<p id="no"></p>
<p id="idk"></p> --}}



</body>
</html>